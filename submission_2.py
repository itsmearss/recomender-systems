# -*- coding: utf-8 -*-
"""Submission 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nsH-I4wnupHlDDYVR1joK2F1NLJki_0q
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import library yang dibutuhkan"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Membaca dataset yang dengan ekstensi .csv dan menyimpannya ke dalam dataframe df"""

df = pd.read_csv("/content/drive/My Drive/Coolyeah/Semester 5/Dicoding ML/Machine Learning Terapan/Datasets/spotify_millsongdata.csv")
df.head()

"""mengambil 5.000 baris pertama dari dataset"""

df = df[0:5000]

"""membersihkan dan mengubah struktur DataFrame lagu dengan menghapus kolom yang tidak diperlukan, mengganti nama kolom, menghapus duplikat berdasarkan judul lagu, dan mereset indeks untuk mempersiapkan data"""

# Menghapus Kolom "link"
df.drop(["link"], axis = 1, inplace = True)

# Mengganti Nama Kolom "text" Menjadi "lyrics"
df.rename(columns = {"text":"lyrics"}, inplace = True)

# Menghapus Duplikat Berdasarkan Kolom "song"
df.drop_duplicates(subset="song", inplace=True)

# Mereset Indeks DataFrame
df.reset_index(drop = True, inplace = True)

"""menampilkan df"""

df

"""menampilkan info df"""

df.info()

"""membuat kolom baru "combined_features" yang menggabungkan informasi dari kolom "artist", "song", dan "lyrics" dalam dataframe"""

df["combined_features"] = df["artist"]+ " "+df["song"]+" "+df["lyrics"]

"""menampilkan df"""

df

"""menampilkan nilai dari kolom "combined_features" pada baris pertama dari dataframe"""

df.combined_features[0]

""" mencetak nilai dari kolom "combined_features" untuk lima baris pertama dari dataframe"""

for i in range(0,5):
    print("*********************************************\n")
    print(df.combined_features[i])

"""Fungsi cleaning melakukan pembersihan teks dengan menghapus karakter non-alphabetic, mengubah teks menjadi huruf kecil, memisahkan kata-kata, dan menghapus kata-kata penghubung (stopwords) dalam bahasa Inggris."""

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
def cleaning(text):
    text = re.sub("[^a-zA-Z]", " ", text)
    text = text.lower()
    text = text.split()
    stops = set(stopwords.words("english"))
    text = [w for w in text if not w in stops]
    text = " ".join(text)
    return text

"""mengaplikasikan fungsi cleaning pada setiap nilai dalam kolom "combined_features" dataframe"""

df["combined_features"] = df["combined_features"].apply(func = cleaning)

"""mencetak nilai dari kolom "combined_features" untuk lima baris pertama DataFrame df setelah penerapan fungsi pembersihan teks"""

for i in range(0,5):
    print("\n*********************************************\n")
    print(df.combined_features[i])

"""menampilkan "combined_features" pada baris pertama dari dataframe df setelah penerapan fungsi pembersihan teks"""

df.combined_features[0]

"""membuat objek TfidfVectorizer dengan batas maksimal fitur sebanyak 10,000, yang akan digunakan untuk mengonversi teks menjadi representasi vektor TF-IDF."""

tfv = TfidfVectorizer(max_features = 10000)

"""mengonversi teks pada kolom "combined_features" DataFrame df menjadi matriks TF-IDF"""

tfv_matrix = tfv.fit_transform(df["combined_features"])

"""menampilkan shape matrix"""

tfv_matrix.shape

"""menghitung matriks cosinus similarity berdasarkan matriks TF-IDF"""

cosine_sim = cosine_similarity(tfv_matrix)

cosine_sim

"""mencari indeks (index) dari lagu dengan judul "Hope" dalam DataFrame df dan menyimpannya dalam variabel song_index"""

song_user_likes = "Hope"
song_index = df[df.song == song_user_likes].index[0]

song_index

"""membuat daftar yang berisi indeks dan nilai kemiripan kosinus antara lagu "Hope" dengan setiap lagu lain dalam dataset"""

similar_songs = list(enumerate(cosine_sim[song_index]))

"""enampilkan lima elemen pertama dari daftar yang berisi pasangan indeks dan nilai cosinus similarity antara lagu "Hope" dengan lima lagu lainnya dalam dataset."""

similar_songs[0:5]

"""Kode tersebut mengurutkan daftar similar_songs berdasarkan nilai kemiripan kosinus secara menurun, dengan hasil yang diurutkan disimpan dalam variabel sorted_similar_songs."""

sorted_similar_songs = sorted(similar_songs, key=lambda x:x[1], reverse=True)

"""menampilkan lima elemen pertama dari daftar yang berisi pasangan indeks dan nilai kemiripan kosinus antara lagu "Hope" dengan lagu-lagu lain dalam dataset, yang diurutkan berdasarkan tingkat kemiripan secara menurun."""

sorted_similar_songs[0:5]

"""mencetak judul sepuluh lagu yang paling mirip dengan lagu "Hope" berdasarkan nilai kemiripan kosinus yang telah diurutkan sebelumnya."""

for song in sorted_similar_songs[1:11]:
        similar_songs = df[df.index == song[0]]["song"].values[0]
        print(similar_songs)

"""Fungsi recommended_songs tersebut menerima judul lagu yang disukai oleh pengguna, menghitung kemiripan kosinus dengan lagu-lagu lain dalam dataset, dan mencetak judul sepuluh lagu yang paling mirip dengan lagu yang disukai tersebut."""

def recommended_songs(song_user_likes):
    song_index = df[df.song == song_user_likes].index[0]
    similar_songs = list(enumerate(cosine_sim[song_index]))
    sorted_similar_songs = sorted(similar_songs, key=lambda x:x[1], reverse=True)

    for song in sorted_similar_songs[1:11]:
        similar_songs = df[df.index == song[0]]["song"].values[0]
        print(similar_songs)

"""menggunakan fungsi recommended_songs dengan parameter "Love", yang akan menghasilkan rekomendasi sepuluh lagu yang paling mirip dengan lagu "Love"
"""

recommended_songs("Love")